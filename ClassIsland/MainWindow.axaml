<Window x:Class="ClassIsland.MainWindow"
        xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ClassIsland"
        mc:Ignorable="d"
        Title="ClassIsland" 
        Height="1"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        xmlns:controls="clr-namespace:ClassIsland.Controls"
        xmlns:converters="clr-namespace:ClassIsland.Converters"
        xmlns:models="clr-namespace:ClassIsland.Models"
        xmlns:hc="https://handyorg.github.io/handycontrol"
        xmlns:diag="clr-namespace:System.Diagnostics;assembly=WindowsBase"
        xmlns:profile="clr-namespace:ClassIsland.Shared.Models.Profile;assembly=ClassIsland.Shared"
        xmlns:converters1="clr-namespace:ClassIsland.Core.Converters;assembly=ClassIsland.Core"
        xmlns:mah="http://metro.mahapps.com/winfx/xaml/controls"
        xmlns:ci="http://classisland.tech/schemas/xaml/core"
        xmlns:system="clr-namespace:System;assembly=System.Runtime"
        xmlns:componentModel="clr-namespace:System.ComponentModel;assembly=WindowsBase"
        TextElement.Foreground="{DynamicResource MaterialDesignBody}"
        TextElement.FontWeight="{Binding ViewModel.Settings.MainWindowFontWeight2, Converter={StaticResource IntToFontWeightConverter}}"
        d:DataContext="{d:DesignInstance local:MainWindow}"
        FontFamily="{Binding ViewModel.Settings.MainWindowFont, Mode=OneWay, Converter={StaticResource StringToFontFamilyConverter}}"
        SystemDecorations="None"
        ShowInTaskbar="False"
        d:Width="600"
        Background="Transparent"
        TransparencyLevelHint="Transparent"
        SizeChanged="MainWindow_OnSizeChanged"
        Activated="MainWindow_OnActivated"
        Icon="/Assets/AppLogo.ico"
        Loaded="MainWindow_OnLoaded"
        X11Properties.WmClass="classisland_main"
        Closing="MainWindow_OnClosing"
        ShowActivated="False">
    <Window.Resources>
        <converters1:IndexConverter x:Key="IndexConverter" />
        <converters1:ColorToColorPickerBrushConverter x:Key="ColorToColorPickerBrushConverter"/>
        <profile:ClassPlan x:Key="FallbackClassPlan"/>
        
        <NativeMenu x:Key="AppMenu">
            <NativeMenuItem Header="ClassIsland" Click="MenuItemAbout_OnClick">
                <NativeMenuItem.Icon>
                    <OnPlatform Default="Assets/AppLogo.png">
                        <On Content="{x:Null}" Options="macOS"/>
                    </OnPlatform>
                </NativeMenuItem.Icon>
            </NativeMenuItem>
            <NativeMenuItem Header="帮助…"
                            Click="MenuItemHelps_OnClick" 
                            IsVisible="{Binding ViewModel.Settings.IsWelcomeWindowShowed}"/>
            <NativeMenuItemSeparator/>
            <NativeMenuItem Header="显示主界面" Click="MenuItemSwitchMainWindowVisibility_OnClick">
                <MenuItem.IsVisible>
                    <MultiBinding Converter="{StaticResource BooleanAndExpressionMultiConverter}" Mode="OneWay">
                        <Binding Path="ViewModel.Settings.IsMainWindowVisible" Mode="OneWay" Converter="{StaticResource InvertBooleanConverter}" />
                        <Binding Path="ViewModel.Settings.IsWelcomeWindowShowed" Mode="OneWay"/>
                    </MultiBinding>
                </MenuItem.IsVisible>
            </NativeMenuItem>
            <NativeMenuItem Header="隐藏主界面" Click="MenuItemSwitchMainWindowVisibility_OnClick">
                <MenuItem.IsVisible>
                    <MultiBinding Converter="{StaticResource BooleanAndExpressionMultiConverter}" Mode="OneWay">
                        <Binding Path="ViewModel.Settings.IsMainWindowVisible" Mode="OneWay"/>
                        <Binding Path="ViewModel.Settings.IsWelcomeWindowShowed" Mode="OneWay"/>
                    </MultiBinding>
                </MenuItem.IsVisible>
            </NativeMenuItem>
            <NativeMenuItem Header="清除全部提醒" Click="MenuItemClearAllNotifications_OnClick">
                <MenuItem.IsVisible>
                    <MultiBinding Converter="{StaticResource BooleanAndExpressionMultiConverter}" Mode="OneWay">
                        <Binding Path="ViewModel.Settings.IsWelcomeWindowShowed" Mode="OneWay"/>
                        <Binding Path="NotificationHostService.IsNotificationsPlaying" Mode="OneWay"/>
                    </MultiBinding>
                </MenuItem.IsVisible>
            </NativeMenuItem>
            <NativeMenuItemSeparator/>
            <NativeMenuItem Header="编辑档案…" Click="ButtonSettings_OnClick" />
            <NativeMenuItem Header="应用设置…" Click="MenuItemSettings_OnClick" />
            <NativeMenuItem Header="加载临时课表…" Click="MenuItemTemporaryClassPlan_OnClick" >
            </NativeMenuItem>
            <NativeMenuItem Header="换课…" Click="MenuItemClassSwap_OnClick">
            </NativeMenuItem>
            <NativeMenuItemSeparator />
            <NativeMenuItem  Header="重启" Click="MenuItemRestartApp_OnClick"/>
            <NativeMenuItem  Header="退出" Click="MenuItemExitApp_OnClick"/>
            <NativeMenuItemSeparator IsVisible="{Binding ViewModel.Settings.IsDebugEnabled}"/>
            <NativeMenuItem Header="dev__Debug" IsVisible="{Binding ViewModel.Settings.IsDebugEnabled}">
                <NativeMenu>
                    <NativeMenuItem Header="DevTools" Click="NativeMenuItemDebugDevTools_OnClick"/>
                    <NativeMenuItem Header="DevPortal" Click="NativeMenuItemDebugDevPortal_OnClick"/>
                    <NativeMenuItemSeparator/>
                    <NativeMenuItem  Header="启用课表" Click="NativeMenuItemDebugEnableTempClassPlan_OnClick"/>
                    <NativeMenuItem  Header="显示崩溃窗口" Click="NativeMenuItemDebugCrashTest_OnClick"/>
                    <NativeMenuItem  Header="WelcomeWindow" Click="NativeMenuItemDebugOpenWelcomeWindow_OnClick"/>
                    <NativeMenuItem  Header="WelcomeWindow (full)" Click="NativeMenuItemDebugOpenWelcomeWindowFull_OnClick"/>
                </NativeMenu>
            </NativeMenuItem>
        </NativeMenu>
    </Window.Resources>
    <Window.Styles>
        <Style Selector="Grid#GridRoot">
            <Style Selector="^.ExplicitShowed.OverlayOpened">
                <Setter Property="IsVisible" Value="{Binding SettingsService.Settings.IsMainWindowVisible}"/>
            </Style>
            <Style Selector="^.BasicHidingMode:not(.ExplicitShowed)">
                <Style Selector="^.HideOnClass.StateOnClass">
                    <Setter Property="IsVisible" Value="False"/>
                </Style>
                <Style Selector="^.HideOnMaxWindow.ForegroundMaxWindow">
                    <Setter Property="IsVisible" Value="False"/>
                </Style>
                <Style Selector="^.HideOnFullscreen.ForegroundFullscreen">
                    <Setter Property="IsVisible" Value="False"/>
                </Style>
            </Style>
            <Style Selector="^.AdvancedHidingMode.HideRuleSatisfied:not(.ExplicitShowed)">
                <Setter Property="IsVisible" Value="False"/>
            </Style>
            <Setter Property="IsVisible" Value="{Binding ViewModel.Settings.IsMainWindowVisible}" />
        </Style>
    </Window.Styles>
    <StackPanel>
        <Grid x:Name="LayoutContainerGrid" SizeChanged="LayoutContainerGrid_OnSizeChanged">
            <!-- ROOT -->
            <LayoutTransformControl>
                <LayoutTransformControl.LayoutTransform>
                    <TransformGroup>
                        <ScaleTransform ScaleX="{Binding ViewModel.Settings.Scale, Mode=OneWay}"
                                        ScaleY="{Binding ViewModel.Settings.Scale, Mode=OneWay}" />
                        <SkewTransform />
                        <RotateTransform />
                        <TranslateTransform />
                    </TransformGroup>
                </LayoutTransformControl.LayoutTransform>
                <Grid ClipToBounds="True"
                      VerticalAlignment="Top"
                      HorizontalAlignment="Stretch"
                      x:Name="GridRoot"
                      RenderTransformOrigin="0,0"

                      Classes.ExplicitShowed="{Binding ViewModel.IsNotificationWindowExplicitShowed, Mode=OneWay}"
                      Classes.OverlayOpened="{Binding ViewModel.IsOverlayOpened, Mode=OneWay}"
                      Classes.HideOnClass="{Binding ViewModel.Settings.HideOnClass, Mode=OneWay}"
                      Classes.HideOnMaxWindow="{Binding ViewModel.Settings.HideOnMaxWindow, Mode=OneWay}"
                      Classes.HideOnFullscreen="{Binding ViewModel.Settings.HideOnFullscreen, Mode=OneWay}"
                      Classes.ForegroundMaxWindow="{Binding ViewModel.IsForegroundMaxWindow, Mode=OneWay}"
                      Classes.ForegroundFullscreen="{Binding ViewModel.IsForegroundFullscreen, Mode=OneWay}"
                      Classes.HideRuleSatisfied="{Binding ViewModel.IsHideRuleSatisfied, Mode=OneWay}"

                      ci:MainWindowStylesAssist.IsIslandSeperated="{Binding ViewModel.Settings.IsIslandSeperated}"
                      ci:MainWindowStylesAssist.ComponentsSpacing="12"
                      ci:MainWindowStylesAssist.IsProgressAccuracyReduced="{Binding ViewModel.Settings.ReduceProgressAccuracy}"
                      ci:WrapPanelResizingAnimationAssist.Duration="0:0:0.25"
                      ci:WrapPanelResizingAnimationAssist.Easing="0.25, 1, 0.5, 1">
                    <Interaction.Behaviors>
                        <DataTriggerBehavior Binding="{Binding ViewModel.Settings.HideMode, Mode=OneWay}" Value="0">
                            <AddClassAction ClassName="BasicHidingMode" />
                        </DataTriggerBehavior>
                        <DataTriggerBehavior Binding="{Binding ViewModel.Settings.HideMode, Mode=OneWay}" Value="1">
                            <AddClassAction ClassName="AdvancedHidingMode" />
                        </DataTriggerBehavior>
                        <DataTriggerBehavior Binding="{Binding LessonsService.CurrentState, Mode=OneWay}"
                                             Value="OnClass">
                            <AddClassAction ClassName="StateOnClass" />
                        </DataTriggerBehavior>
                    </Interaction.Behaviors>
                    <Grid.Effect>
                        <DropShadowEffect BlurRadius="8" Opacity="0"
                                          Color="Black" />
                    </Grid.Effect>

                    <Border ClipToBounds="True"
                            x:Name="ResourceLoaderBorder"
                            TextElement.FontSize="{DynamicResource MainWindowBodyFontSize}">
                        <Border.Resources>

                        </Border.Resources>
                        <Grid>
                            <ItemsControl Grid.Column="0"
                                          x:Name="RootMainWindowLinesItemsControl"
                                          VerticalAlignment="Stretch"
                                          ItemsSource="{Binding ComponentsService.CurrentComponents.Lines, Mode=OneWay}">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel Classes="animated-resize"/>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                            <controls:MainWindowLine
                                                WindowDockingLocation="{Binding ViewModel.Settings.WindowDockingLocation, Mode=OneWay, RelativeSource={RelativeSource AncestorType=local:MainWindow}}"
                                                LastStoryboardName="{Binding ViewModel.LastStoryboardName, Mode=OneWay, RelativeSource={RelativeSource AncestorType=local:MainWindow}}"
                                                IsMainLine="{Binding IsMainLine}"
                                                IsNotificationEnabled="{Binding IsNotificationEnabled}"
                                                LineNumber="0"
                                                HorizontalAlignment="Stretch"
                                                Settings="{Binding}"
                                                IsOverlayOpen="{Binding ViewModel.IsOverlayOpened, Mode=OneWay, RelativeSource={RelativeSource AncestorType=local:MainWindow}}">
                                                <ItemsControl ItemsSource="{Binding Children}"
                                                              Classes="root-components-control"
                                                              ClipToBounds="False">
                                                    <ItemsControl.ItemsPanel>
                                                        <ItemsPanelTemplate>
                                                            <StackPanel Classes="components-panel" />
                                                        </ItemsPanelTemplate>
                                                    </ItemsControl.ItemsPanel>
                                                    <ItemsControl.ItemTemplate>
                                                        <DataTemplate>
                                                            <ci:ComponentPresenter IsOnMainWindow="True"
                                                                IsRootComponent="True"
                                                                Settings="{Binding}"
                                                                HidingRules="{Binding HidingRules, Mode=OneWay}"
                                                                HideOnRule="{Binding HideOnRule, Mode=OneWay}"
                                                                Margin="6 0" />
                                                        </DataTemplate>
                                                    </ItemsControl.ItemTemplate>
                                                </ItemsControl>
                                            </controls:MainWindowLine>
                                        </Grid>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </Grid>

                    </Border>

                    <!--<hc:NotifyIcon ContextMenu="{StaticResource AppContextMenu}" Text="ClassIsland" Icon="/Assets/AppLogo.ico"/>-->
                    <!--<tb:TaskbarIcon ContextMenu="{StaticResource AppConteGriddu}"
                        DataContext="{Binding}"
                        x:Name="MyTaskBarIcon"
                        IconSource="/Assets/AppLogo.ico"
                        MenuActivation="LeftOrRightClick"
                        ToolTipText="ClassIsland"
                        ToolTip.Tip="ClassIsland">
            </tb:TaskbarIcon>-->

                    <!-- Content -->

                </Grid>
            </LayoutTransformControl>

            <!-- Scale debug -->
            <TextBlock Foreground="Cyan"
                       d:Visibility="Collapsed"
                       IsVisible="{Binding ViewModel.Settings.IsMainWindowDebugEnabled}">
                <Run Text="GridRoot:" />
                <Run Text="{Binding ActualWidth, ElementName=GridRoot, Mode=OneWay, StringFormat={}{0:f1}}" />
                <Run Text="{Binding ActualHeight, ElementName=GridRoot, Mode=OneWay, StringFormat={}{0:f1}}" />
                <LineBreak />
                <Run Text="CurrentTime:" />
                <Run Text="{Binding ViewModel.DebugCurrentTime}" />
            </TextBlock>
            <TextBlock Foreground="Cyan"
                       HorizontalAlignment="Right"
                       d:Visibility="Collapsed"
                       IsVisible="{Binding ViewModel.Settings.IsMainWindowDebugEnabled}">
                <Run Text="{x:Static local:App.AppVersionLong}" />
            </TextBlock>
        </Grid></StackPanel>
</Window>
