<Window x:Class="ClassIsland.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ClassIsland"
        mc:Ignorable="d"
        Title="ClassIsland" 
        Height="40" 
        Width="800"
        SnapsToDevicePixels="True"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        xmlns:controls="clr-namespace:ClassIsland.Controls"
        xmlns:converters="clr-namespace:ClassIsland.Converters"
        xmlns:models="clr-namespace:ClassIsland.Models"
        xmlns:hc="https://handyorg.github.io/handycontrol"
        xmlns:tb="clr-namespace:H.NotifyIcon;assembly=H.NotifyIcon.Wpf"
        xmlns:diag="clr-namespace:System.Diagnostics;assembly=WindowsBase"
        xmlns:profile="clr-namespace:ClassIsland.Shared.Models.Profile;assembly=ClassIsland.Shared"
        xmlns:converters1="clr-namespace:ClassIsland.Core.Converters;assembly=ClassIsland.Core"
        xmlns:mah="http://metro.mahapps.com/winfx/xaml/controls"
        TextElement.Foreground="{DynamicResource MaterialDesignBody}"
        TextElement.FontWeight="{Binding ViewModel.Settings.MainWindowFontWeight2, Converter={StaticResource IntToFontWeightConverter}}"
        TextElement.FontSize="14"
        d:DataContext="{d:DesignInstance local:MainWindow}"
        FontFamily="{Binding ViewModel.Settings.MainWindowFont, Mode=OneWay}"
        ResizeMode="NoResize"
        MouseDown="MainWindow_OnPreviewMouseDown"
        ShowInTaskbar="False"
        WindowStyle="None"
        d:Width="600"
        Closing="MainWindow_OnClosing"
        SizeChanged="MainWindow_OnSizeChanged"
        Activated="MainWindow_OnActivated"
        StateChanged="MainWindow_OnStateChanged"
        Icon="/Assets/AppLogo.ico"
        Loaded="MainWindow_OnLoaded"
        SizeToContent="Height"
        materialDesign:ShadowAssist.CacheMode="{x:Null}">
    <Window.CommandBindings>
        <CommandBinding Command="{x:Static local:MainWindow.TrayIconLeftClickedCommand}"
                        Executed="TrayIconOnClicked_OnExecuted"/>
    </Window.CommandBindings>
    <Window.Resources>
        <converters1:IndexConverter x:Key="IndexConverter" />
        <profile:ClassPlan x:Key="FallbackClassPlan"/>
        <Style TargetType="FrameworkElement" x:Key="DockingStyle">
            <Style.Triggers>
                <DataTrigger Binding="{Binding ViewModel.Settings.WindowDockingLocation, Mode=OneWay}"
                                             Value="0">
                    <Setter Property="HorizontalAlignment" Value="Left" />
                </DataTrigger>
                <DataTrigger Binding="{Binding ViewModel.Settings.WindowDockingLocation, Mode=OneWay}"
                                             Value="1">
                    <Setter Property="HorizontalAlignment" Value="Center" />
                </DataTrigger>
                <DataTrigger Binding="{Binding ViewModel.Settings.WindowDockingLocation, Mode=OneWay}"
                                             Value="2">
                    <Setter Property="HorizontalAlignment" Value="Right" />
                </DataTrigger>
                <DataTrigger Binding="{Binding ViewModel.Settings.WindowDockingLocation, Mode=OneWay}"
                                             Value="3">
                    <Setter Property="HorizontalAlignment" Value="Left" />
                </DataTrigger>
                <DataTrigger Binding="{Binding ViewModel.Settings.WindowDockingLocation, Mode=OneWay}"
                                             Value="4">
                    <Setter Property="HorizontalAlignment" Value="Center" />
                </DataTrigger>
                <DataTrigger Binding="{Binding ViewModel.Settings.WindowDockingLocation, Mode=OneWay}"
                                             Value="5">
                    <Setter Property="HorizontalAlignment" Value="Right" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <converters1:BooleanToVisibilityReConverter x:Key="BooleanToVisibilityReConverter"/>
        <ContextMenu FontFamily="{StaticResource HarmonyOsSans}" x:Key="AppContextMenu"
                     MinWidth="150"
                     StaysOpen="True"
                     IsEnabled="{Binding ViewModel.IsBusy, Converter={StaticResource InvertBooleanConverter}}">
            <ContextMenu.Resources>
                <converters1:BooleanAndToVisibilityMultiConverter x:Key="BooleanAndToVisibilityMultiConverter" />
            </ContextMenu.Resources>
            <MenuItem Header="ClassIsland" Click="MenuItemAbout_OnClick" IsEnabled="{Binding ViewModel.Settings.IsWelcomeWindowShowed}">
                <MenuItem.Icon>
                    <Image Source="/Assets/AppLogo.ico"/>
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Header="更新可用…" Click="MenuItemUpdates_OnClick" IsEnabled="{Binding ViewModel.Settings.IsWelcomeWindowShowed}">
                <MenuItem.Icon>
                    <materialDesign:PackIcon Kind="UploadOutline"/>
                </MenuItem.Icon>
                <MenuItem.Style>
                    <Style TargetType="MenuItem" BasedOn="{StaticResource MaterialDesignMenuItem}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ViewModel.Settings.LastUpdateStatus}" Value="UpToDate">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </MenuItem.Style>
            </MenuItem>
            <MenuItem Icon="{materialDesign:PackIcon HelpCircleOutline}" Header="帮助…" Click="MenuItemHelps_OnClick" 
                      Visibility="{Binding ViewModel.Settings.IsWelcomeWindowShowed, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            <Separator/>
            <MenuItem Icon="{materialDesign:PackIcon EyeOutLine}" Header="显示主界面" Click="MenuItemSwitchMainWindowVisibility_OnClick">
                <MenuItem.Visibility>
                    <MultiBinding Converter="{StaticResource BooleanAndToVisibilityMultiConverter}" Mode="OneWay">
                        <Binding Path="ViewModel.Settings.IsMainWindowVisible" Mode="OneWay" Converter="{StaticResource InvertBooleanConverter}" />
                        <Binding Path="ViewModel.Settings.IsWelcomeWindowShowed" Mode="OneWay"/>
                    </MultiBinding>
                </MenuItem.Visibility>
            </MenuItem>
            <MenuItem Icon="{materialDesign:PackIcon EyeOffOutline}" Header="隐藏主界面" Click="MenuItemSwitchMainWindowVisibility_OnClick">
                <MenuItem.Visibility>
                    <MultiBinding Converter="{StaticResource BooleanAndToVisibilityMultiConverter}" Mode="OneWay">
                        <Binding Path="ViewModel.Settings.IsMainWindowVisible" Mode="OneWay"/>
                        <Binding Path="ViewModel.Settings.IsWelcomeWindowShowed" Mode="OneWay"/>
                    </MultiBinding>
                </MenuItem.Visibility>
            </MenuItem>
            <MenuItem Icon="{materialDesign:PackIcon NotificationClearAll}" Header="清除全部提醒" Click="MenuItemClearAllNotifications_OnClick">
                <MenuItem.Visibility>
                    <MultiBinding Converter="{StaticResource BooleanAndToVisibilityMultiConverter}" Mode="OneWay">
                        <Binding Path="ViewModel.Settings.IsWelcomeWindowShowed" Mode="OneWay"/>
                        <Binding Path="ViewModel.IsOverlayOpened" Mode="OneWay"/>
                    </MultiBinding>
                </MenuItem.Visibility>
            </MenuItem>
            <Separator Visibility="{Binding ViewModel.Settings.IsWelcomeWindowShowed, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            <MenuItem Icon="{materialDesign:PackIcon FileDocumentEditOutline}" Header="编辑档案…" Click="ButtonSettings_OnClick" Visibility="{Binding ViewModel.Settings.IsWelcomeWindowShowed, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            <MenuItem Icon="{materialDesign:PackIcon SettingsOutline}" Header="应用设置…" Click="MenuItemSettings_OnClick" Visibility="{Binding ViewModel.Settings.IsWelcomeWindowShowed, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            <MenuItem Icon="{materialDesign:PackIcon FileChartOutline}" Header="加载临时课表…" Click="MenuItemTemporaryClassPlan_OnClick" Visibility="{Binding ViewModel.Settings.IsWelcomeWindowShowed, Converter={StaticResource BooleanToVisibilityConverter}}">
            </MenuItem>
            <MenuItem Icon="{materialDesign:PackIcon SwapHorizontal}" Header="换课…" Click="MenuItemClassSwap_OnClick">
                <MenuItem.Style>
                    <Style TargetType="MenuItem" BasedOn="{StaticResource MaterialDesignMenuItem}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding LessonsService.CurrentClassPlan}" Value="{x:Null}">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                        </Style.Triggers>
                        <Setter Property="Visibility" Value="{Binding ViewModel.Settings.IsWelcomeWindowShowed, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                    </Style>
                </MenuItem.Style>
            </MenuItem>
            <Separator Visibility="{Binding ViewModel.Settings.IsWelcomeWindowShowed, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            <MenuItem Icon="{materialDesign:PackIcon ExitToApp}"  Header="退出" Click="MenuItemExitApp_OnClick"/>
            <Separator Visibility="{Binding ViewModel.Settings.IsDebugEnabled, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            <MenuItem Icon="{materialDesign:PackIcon BugOutline}" Header="调试"
                      Visibility="{Binding ViewModel.Settings.IsDebugEnabled, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}">
                <MenuItem Header="SizeToContentTest" Click="ButtonResizeDebug_OnClick"/>
                <Separator/>
                <MenuItem Header="OverlayMaskIn" Click="MenuItemDebugOverlayMaskIn_OnClick"/>
                <MenuItem Header="OverlayMaskOut" Click="MenuItemDebugOverlayMaskOut_OnClick"/>
                <MenuItem Header="OverlayOut" Click="MenuItemDebugOverlayOut_OnClick"/>
                <MenuItem Header="OverlayMaskOutDirect" Click="MenuItemDebugOverlayMaskOutDirect_OnClick"/>
                <Separator/>
                <MenuItem Header="WelcomeWindow" Click="MenuItemDebugWelcomeWindow_OnClick"/>
                <MenuItem Header="WelcomeWindow (Full)" Click="MenuItemDebugWelcomeWindow2_OnClick"/>
                <MenuItem Header="ClassIsland 移动向导" Click="MenuItemDebugMoveClassIslandDirectory_OnClick"/>
                <Separator/>
                <MenuItem Header="FitSize" Click="MenuItemDebugFitSize_OnClick"/>
            </MenuItem>
        </ContextMenu>

        <!--#region StoryBoards-->
        <Storyboard x:Key="OverlayMaskIn">
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverlayMask" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                <EasingDoubleKeyFrame KeyTime="00:00:00" Value="-60"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <QuinticEase EasingMode="EaseOut"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverlayMaskContent" Storyboard.TargetProperty="(UIElement.Opacity)">
                <EasingDoubleKeyFrame KeyTime="00:00:00" Value="0"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <PowerEase EasingMode="EaseIn"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="RootDropShadowEffect" Storyboard.TargetProperty="Opacity">
                <EasingDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0.7">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <CircleEase EasingMode="EaseIn"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="GridOverlay" Storyboard.TargetProperty="(UIElement.Opacity)">
                <EasingDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <QuinticEase EasingMode="EaseOut"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
            <!--<DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundBorderOverlay" Storyboard.TargetProperty="(UIElement.Opacity)">
                <EasingDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
            </DoubleAnimationUsingKeyFrames>-->
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundBorderOverlayMask" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                <EasingDoubleKeyFrame KeyTime="00:00:00" Value="-60"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <QuinticEase EasingMode="EaseOut"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="OverlayMaskOut">
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="GridContentRoot" Storyboard.TargetProperty="(UIElement.Opacity)">
                <EasingDoubleKeyFrame KeyTime="00:00:00" Value="0"/>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="GridOverlay" Storyboard.TargetProperty="(UIElement.Opacity)">
                <EasingDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverlayMask" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                <EasingDoubleKeyFrame KeyTime="00:00:00" Value="0"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.3000000" Value="60">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <CircleEase EasingMode="EaseIn"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="RootDropShadowEffect" Storyboard.TargetProperty="Opacity">
                <EasingDoubleKeyFrame KeyTime="00:00:00" Value="0.7"/>
                <!--<EasingDoubleKeyFrame KeyTime="00:00:00.1" Value="0.7"/>-->
                <EasingDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <CircleEase EasingMode="EaseIn"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverlayMaskContent" Storyboard.TargetProperty="(UIElement.Opacity)">
                <EasingDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0"/>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundBorderOverlayMask" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                <EasingDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.3000000" Value="60">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <CircleEase EasingMode="EaseIn"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="OverlayOut">
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="GridContentRoot" Storyboard.TargetProperty="(UIElement.Opacity)">
                <EasingDoubleKeyFrame KeyTime="00:00:00" Value="0"/>
                <!--<EasingDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0"/>-->
                <EasingDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="GridOverlay" Storyboard.TargetProperty="(UIElement.Opacity)">
                <EasingDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.1" Value="1"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <CircleEase EasingMode="EaseIn"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="RootDropShadowEffect" Storyboard.TargetProperty="Opacity">
                <!--<EasingDoubleKeyFrame KeyTime="00:00:00" Value="0.7"/>-->
                <!--<EasingDoubleKeyFrame KeyTime="00:00:00.1" Value="0.7"/>-->
                <EasingDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <CircleEase EasingMode="EaseIn"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
            <!--<DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundBorderOverlay" Storyboard.TargetProperty="(UIElement.Opacity)">
                <EasingDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <QuinticEase EasingMode="EaseOut"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>-->
        </Storyboard>
        <Storyboard x:Key="OverlayMaskOutDirect">
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="GridContentRoot" Storyboard.TargetProperty="(UIElement.Opacity)">
                <EasingDoubleKeyFrame KeyTime="00:00:00" Value="0"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="GridOverlay" Storyboard.TargetProperty="(UIElement.Opacity)">
                <EasingDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <CubicEase EasingMode="EaseOut"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="RootDropShadowEffect" Storyboard.TargetProperty="Opacity">
                <EasingDoubleKeyFrame KeyTime="00:00:00.0000000" Value="0.7"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <CircleEase EasingMode="EaseIn"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverlayMask" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                <EasingDoubleKeyFrame KeyTime="00:00:00" Value="0"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.3000000" Value="60">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <CircleEase EasingMode="EaseIn"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverlayMaskContent" Storyboard.TargetProperty="(UIElement.Opacity)">
                <EasingDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0"/>
            </DoubleAnimationUsingKeyFrames>
            <!--<DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundBorderOverlay" Storyboard.TargetProperty="(UIElement.Opacity)">
                <EasingDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <QuinticEase EasingMode="EaseOut"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>-->
            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundBorderOverlayMask" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                <EasingDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.3000000" Value="60">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <CircleEase EasingMode="EaseIn"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>

        <Storyboard x:Key="WindowMouseIn">
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)">
                <EasingDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.1500000" Value="0.1">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <CircleEase EasingMode="EaseOut"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="WindowMouseOut">
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)">
                <EasingDoubleKeyFrame KeyTime="00:00:00" Value="0.1"/>
                <EasingDoubleKeyFrame KeyTime="00:00:00.1500000" Value="1">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <CircleEase EasingMode="EaseIn"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <converters1:IntToStringConverter x:Key="IntToStringConverter" />
        <converters1:MiniInfoGuidToMiniInfoProviderElementMultiConverter x:Key="MiniInfoGuidToMiniInfoProviderElementConverter" />
        <converters1:WidthDoubleToRectConverter x:Key="WidthDoubleToRectConverter" />
        <!--#endregion 1-->
    </Window.Resources>
    <Window.Style>
        <Style TargetType="Window">
            <Style.Triggers>
                <!-- 鼠标移入 -->
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding ViewModel.IsMouseIn, Mode=OneWay}" Value="True"/>
                        <Condition Binding="{Binding ViewModel.Settings.IsMouseInFadingEnabled, Mode=OneWay}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <MultiDataTrigger.ExitActions>
                        <BeginStoryboard Storyboard="{StaticResource WindowMouseOut}" Name="WindowMouseOut"/>
                    </MultiDataTrigger.ExitActions>
                    <MultiDataTrigger.EnterActions>
                        <BeginStoryboard Storyboard="{StaticResource WindowMouseIn}" Name="WindowMouseIn"/>
                    </MultiDataTrigger.EnterActions>
                </MultiDataTrigger>
                <!-- Debug -->
                <DataTrigger Binding="{Binding ViewModel.Settings.IsMainWindowDebugEnabled, Mode=OneWay}" Value="True">
                    <Setter Property="Background" Value="#2FAA0000"/>
                </DataTrigger>
            </Style.Triggers>
            <!-- 默认状态 -->
            <Setter Property="Topmost" Value="False"/>
            <Setter Property="Background" Value="{x:Null}"/>
        </Style>
    </Window.Style>
    <Grid>
        <!-- ROOT -->
        <Grid ClipToBounds="True"
              IsHitTestVisible="{Binding ViewModel.Settings.IsMouseClickingEnabled, Mode=OneWay}"
              VerticalAlignment="Top"
              HorizontalAlignment="Stretch"
              x:Name="GridRoot"
              SnapsToDevicePixels="False"
              RenderTransformOrigin="0,0">
            <Grid.LayoutTransform>
                <TransformGroup>
                    <ScaleTransform ScaleX="{Binding ViewModel.Settings.Scale, Mode=OneWay}"
                                    ScaleY="{Binding ViewModel.Settings.Scale, Mode=OneWay}" />
                    <SkewTransform />
                    <RotateTransform />
                    <TranslateTransform />
                </TransformGroup>
            </Grid.LayoutTransform>
            <Grid.Style>
                <Style TargetType="Grid">
                    <Style.Triggers>
                        <!-- 显示提醒时置顶窗口 -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ViewModel.IsNotificationWindowExplicitShowed, Mode=OneWay}"
                                           Value="True" />
                                <Condition Binding="{Binding ViewModel.IsOverlayOpened, Mode=OneWay}"
                                           Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" Value="{Binding ViewModel.Settings.IsMainWindowVisible, Converter={StaticResource BooleanToVisibilityConverter}}" />
                        </MultiDataTrigger>
                        <!-- 窗口上课隐藏 -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ViewModel.Settings.HideMode, Mode=OneWay}"
                                           Value="0" />
                                <Condition Binding="{Binding ViewModel.Settings.HideOnClass, Mode=OneWay}" Value="True" />
                                <Condition Binding="{Binding LessonsService.CurrentState, Mode=OneWay}" Value="OnClass" />
                                <Condition Binding="{Binding ViewModel.IsNotificationWindowExplicitShowed, Mode=OneWay}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" Value="Collapsed" />
                        </MultiDataTrigger>
                        <!-- 窗口最大化隐藏 -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ViewModel.Settings.HideMode, Mode=OneWay}"
                                           Value="0" />
                                <Condition Binding="{Binding ViewModel.Settings.HideOnMaxWindow, Mode=OneWay}"
                                           Value="True" />
                                <Condition Binding="{Binding ViewModel.IsForegroundMaxWindow, Mode=OneWay}"
                                           Value="True" />
                                <Condition Binding="{Binding ViewModel.IsNotificationWindowExplicitShowed, Mode=OneWay}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" Value="Collapsed" />
                        </MultiDataTrigger>
                        <!-- 窗口全屏隐藏 -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ViewModel.Settings.HideMode, Mode=OneWay}"
                                           Value="0" />
                                <Condition Binding="{Binding ViewModel.Settings.HideOnFullscreen, Mode=OneWay}"
                                           Value="True" />
                                <Condition Binding="{Binding ViewModel.IsForegroundFullscreen, Mode=OneWay}"
                                           Value="True" />
                                <Condition Binding="{Binding ViewModel.IsNotificationWindowExplicitShowed, Mode=OneWay}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" Value="Collapsed" />
                        </MultiDataTrigger>
                        <!-- 窗口条件隐藏 -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ViewModel.Settings.HideMode, Mode=OneWay}"
                                           Value="1" />
                                <Condition Binding="{Binding ViewModel.IsHideRuleSatisfied, Mode=OneWay}"
                                           Value="True" />
                                <Condition Binding="{Binding ViewModel.IsNotificationWindowExplicitShowed, Mode=OneWay}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" Value="Collapsed" />
                        </MultiDataTrigger>

                    </Style.Triggers>

                    <Setter Property="Visibility" Value="{Binding ViewModel.Settings.IsMainWindowVisible, Converter={StaticResource BooleanToVisibilityConverter}}" />
                </Style>
            </Grid.Style>
            <Grid.Effect>
                <DropShadowEffect BlurRadius="8" Direction="0" 
                                  ShadowDepth="0" Opacity="0"
                                  x:Name="RootDropShadowEffect"
                                  Color="Black"/>
            </Grid.Effect>
            
            <Grid Visibility="Hidden">
                <Border x:Name="DummyBackgroundBorder"
                        Width="{Binding ActualWidth, ElementName=BackgroundBorder}"
                        Background="#ffffff"
                        Style="{StaticResource DockingStyle}"
                        SnapsToDevicePixels="True"
                        CornerRadius="20"
                        Height="40" d:IsHidden="True" />
            </Grid>


            <Border ClipToBounds="True"
                    x:Name="ResourceLoaderBorder"
                    TextElement.FontSize="{DynamicResource MainWindowBodyFontSize}">
                <Border.Resources>

                </Border.Resources>
                <Grid HorizontalAlignment="Stretch"
                      ClipToBounds="True">
                    <Grid.Style>
                        <!-- 贴靠Style -->
                        <Style TargetType="Grid">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ViewModel.Settings.WindowDockingLocation, Mode=OneWay}"
                                             Value="0">
                                    <Setter Property="Margin" Value="0 0 8 8" />
                                    <Setter Property="HorizontalAlignment" Value="Left" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding ViewModel.Settings.WindowDockingLocation, Mode=OneWay}"
                                             Value="1">
                                    <Setter Property="Margin" Value="8 0 8 8" />
                                    <Setter Property="HorizontalAlignment" Value="Center" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding ViewModel.Settings.WindowDockingLocation, Mode=OneWay}"
                                             Value="2">
                                    <Setter Property="Margin" Value="8 0 0 8" />
                                    <Setter Property="HorizontalAlignment" Value="Right" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding ViewModel.Settings.WindowDockingLocation, Mode=OneWay}"
                                             Value="3">
                                    <Setter Property="Margin" Value="0 8 8 0" />
                                    <Setter Property="HorizontalAlignment" Value="Left" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding ViewModel.Settings.WindowDockingLocation, Mode=OneWay}"
                                             Value="4">
                                    <Setter Property="Margin" Value="8 8 8 0" />
                                    <Setter Property="HorizontalAlignment" Value="Center" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding ViewModel.Settings.WindowDockingLocation, Mode=OneWay}"
                                             Value="5">
                                    <Setter Property="Margin" Value="8 8 0 0" />
                                    <Setter Property="HorizontalAlignment" Value="Right" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Grid.Style>
                    <Grid.Clip>
                        <MultiBinding Converter="{StaticResource WidthDoubleToRectConverter}">
                            <Binding Path="BackgroundWidth" Mode="OneWay"/>
                            <Binding Path="ActualWidth" Mode="OneWay" RelativeSource="{RelativeSource Self}"/>
                            <Binding Path="ActualHeight" Mode="OneWay" RelativeSource="{RelativeSource Self}"/>
                            <Binding Path="ViewModel.Settings.WindowDockingLocation" Mode="OneWay"/>
                            <Binding Path="ViewModel.Settings.RadiusX" Mode="OneWay"/>
                            <Binding Path="ViewModel.Settings.RadiusX" Mode="OneWay"/>
                        </MultiBinding>
                    </Grid.Clip>
                    <!-- Background -->
                    <Border x:Name="BackgroundBorder"
                            Width="{Binding BackgroundWidth, Mode=OneWay}"
                            Background="{DynamicResource MaterialDesignPaper}"
                            Opacity="{Binding ViewModel.Settings.Opacity, Mode=OneWay}"
                            Style="{StaticResource DockingStyle}"
                            SnapsToDevicePixels="True"
                            Height="40" d:IsHidden="True" />
                    <Border x:Name="BackgroundBorderOverlay"
                            Width="{Binding ActualWidth, ElementName=BackgroundBorder, Mode=OneWay}"
                            Background="{DynamicResource MaterialDesignPaper}"
                            Opacity="0"
                            Style="{StaticResource DockingStyle}"
                            SnapsToDevicePixels="True"
                            Height="40" d:IsHidden="True">
                    </Border>
                    <Grid Style="{StaticResource DockingStyle}"
                          Width="{Binding BackgroundWidth, Mode=OneWay}"
                          Height="40"
                          SnapsToDevicePixels="True"
                          ClipToBounds="True">
                        <materialDesign:ColorZone x:Name="BackgroundBorderOverlayMask" Mode="PrimaryMid"
                                                  VerticalAlignment="Stretch"
                                                  RenderTransformOrigin="0.5,0.5">
                            <materialDesign:ColorZone.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform />
                                    <SkewTransform />
                                    <RotateTransform />
                                    <TranslateTransform Y="-50" />
                                </TransformGroup>
                            </materialDesign:ColorZone.RenderTransform>
                        </materialDesign:ColorZone>
                    </Grid>

                    <Grid x:Name="GridWrapper" ClipToBounds="True"
                          Height="40" Style="{StaticResource DockingStyle}"
                          SizeChanged="GridWrapper_OnSizeChanged"
                          SnapsToDevicePixels="True">

                        <Grid Height="40"
                              x:Name="GridContentRoot"
                              Margin="12 0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <ItemsControl Grid.Column="0"
                                          ItemsSource="{Binding ComponentsService.CurrentComponents}"
                                          VerticalContentAlignment="Stretch">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="Horizontal" />
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <Grid>
                                            <controls:ComponentPresenter IsOnMainWindow="True" 
                                                                         Settings="{Binding}"
                                                                         HideOnRule="{Binding HideOnRule, Mode=OneWay}"
                                                                         HidingRules="{Binding HidingRules, Mode=OneWay}"
                                                                         Margin="6 0" />
                                        </Grid>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>

                        </Grid>

                        <!-- Overlay View -->
                        <Grid x:Name="GridOverlay"
                              SnapsToDevicePixels="True"
                              ClipToBounds="True">
                            <Border CornerRadius="20"
                                    ClipToBounds="True">

                                <ProgressBar VerticalAlignment="Stretch"
                                             Maximum="1"
                                             x:Name="OverlayTimeProgressBar"
                                             materialDesign:TransitionAssist.DisableTransitions="True"
                                             Height="{Binding Height, ElementName=GridWrapper}"
                                             Foreground="{DynamicResource MaterialDesignBody}"
                                             Background="Transparent"
                                             BorderBrush="Transparent"
                                             Opacity="0.16">
                                </ProgressBar>
                            </Border>
                            <ContentPresenter Content="{Binding ViewModel.CurrentOverlayElement}" />

                        </Grid>

                        <!-- Mask -->
                        <materialDesign:ColorZone x:Name="OverlayMask" Mode="PrimaryMid" HorizontalAlignment="Stretch"
                                                  VerticalAlignment="Stretch"
                                                  RenderTransformOrigin="0.5,0.5"
                                                  SnapsToDevicePixels="True">
                            <materialDesign:ColorZone.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform />
                                    <SkewTransform />
                                    <RotateTransform />
                                    <TranslateTransform Y="-50" />
                                </TransformGroup>
                            </materialDesign:ColorZone.RenderTransform>
                            <ContentPresenter x:Name="OverlayMaskContent"
                                              Content="{Binding ViewModel.CurrentMaskElement}" />
                        </materialDesign:ColorZone>
                    </Grid>
                </Grid>
            </Border>

            <!--<hc:NotifyIcon ContextMenu="{StaticResource AppContextMenu}" Text="ClassIsland" Icon="/Assets/AppLogo.ico"/>-->
            <!--<tb:TaskbarIcon ContextMenu="{StaticResource AppConteGriddu}"
                        DataContext="{Binding}"
                        x:Name="MyTaskBarIcon"
                        IconSource="/Assets/AppLogo.ico"
                        MenuActivation="LeftOrRightClick"
                        ToolTipText="ClassIsland"
                        ToolTip="ClassIsland">
            </tb:TaskbarIcon>-->

            <!-- Content -->

        </Grid>

        <!-- Scale debug -->
        <TextBlock Foreground="Cyan" 
                   d:Visibility="Collapsed"
                   Visibility="{Binding ViewModel.Settings.IsMainWindowDebugEnabled, Converter={StaticResource BooleanToVisibilityConverter}}">
            <Run Text="GridRoot:"/>
            <Run Text="{Binding ActualWidth, ElementName=GridRoot, Mode=OneWay, StringFormat={}{0:f1}}"/>
            <Run Text="{Binding ActualHeight, ElementName=GridRoot, Mode=OneWay, StringFormat={}{0:f1}}"/>
            <Run Text="GridWrapper:"/>
            <Run Text="{Binding ActualWidth, ElementName=GridWrapper, Mode=OneWay, StringFormat={}{0:f1}}"/>
            <Run Text="{Binding ActualHeight, ElementName=GridWrapper, Mode=OneWay, StringFormat={}{0:f1}}"/>
            <LineBreak/>
            <Run Text="CurrentTime:"/>
            <Run Text="{Binding ViewModel.DebugCurrentTime, ConverterCulture=zh-CN}"/>
        </TextBlock>
        <TextBlock Foreground="Cyan" 
                   HorizontalAlignment="Right"
                   d:Visibility="Collapsed"
                   Visibility="{Binding ViewModel.Settings.IsMainWindowDebugEnabled, Converter={StaticResource BooleanToVisibilityConverter}}">
            <Run Text="{x:Static local:App.AppVersionLong}"/>
        </TextBlock>

    </Grid>
</Window>
