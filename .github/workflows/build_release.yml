name: Build

on:
  push:
  workflow_dispatch:
    inputs:
      release_tag:
        description: '发布标签'
        required: true
        type: string
      primary_version:
        description: '主发布版本'
        required: true
        type: string
      channels:
        description: '发布通道'
        required: true
        type: string
      is_test_mode:
        description: '是否处于测试发布模式'
        required: false
        type: boolean

jobs:
  build_app:
    runs-on: ${{ matrix.os == 'linux' &&  'ubuntu-24.04' || ( matrix.os == 'macos' && 'macos-15' || 'windows-latest' ) }}
    env:
      build_id: appBase_${{ matrix.os }}_${{ matrix.arch }}_${{ matrix.build_type }}_${{ matrix.package }}
      artifact_name: out_${{ matrix.package == 'folder' &&  'appBase' || 'app' }}_${{ matrix.os }}_${{ matrix.arch }}_${{ matrix.build_type }}_${{ matrix.package }}
      isTestMode: ${{ github.event.inputs.is_test_mode }}
      arch: ${{ matrix.arch }}
    strategy:
      matrix:
        build_type: ['full', 'selfContained']
        package: ['folder', 'deb']
        arch: ['x64', 'x86', 'arm64']
        os: ['windows', 'linux']
        exclude: 
          - os: linux
            arch: x86
          - os: windows
            package: deb
          - os: linux
            build_type: full  # Linux 上安装 .NET 运行时很不方便，故使用自包含打包。
        include:
          - os: macos
            package: pkg
            build_type: selfContained
            arch: arm64
          - os: macos
            package: pkg
            build_type: selfContained
            arch: x64
    name: Build_AppBase_${{ matrix.os }}_${{ matrix.arch }}_${{ matrix.build_type }}_${{ matrix.package }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
          ref: ${{ github.event_name != 'workflow_dispatch' && github.ref || github.event.inputs.release_tag }}
      
      - name: List files
        run: ls
      
      # Install the .NET Core workload
      - name: Install .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x
      
      - name: Install Macos workload
        if: ${{ matrix.os == 'macos' }}
        run: dotnet workload install macos
        
      - name: Add GitHub Package Registry
        run: dotnet nuget add source --username ClassIsland --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/ClassIsland/index.json"
        
      - uses: little-core-labs/get-git-tag@v3.0.1
        id: tagName
      
      - name: ☢️ Nuke
        env:
          buildType: ${{ matrix.build_type }}
          package: ${{ matrix.package }}
          is_release: ${{ startsWith(github.ref, 'refs/tags/') }}
          test_signing_key: ${{ secrets.TEST_SIGNING_KEY }}
          ApiSigningKey: ${{ secrets.API_SIGNING_KEY}}
          ApiSigningKeyPs: ${{ secrets.API_SIGNING_KEY_PS }}
          arch: ${{ matrix.arch }}
          osName: ${{ matrix.os }}
          appVersion: ${{ steps.tagName.outputs.tag }} 
          buildName: ${{ matrix.package == 'folder' &&  'appBase' || 'app' }}  # 打包版本的构建将在这一步直接产生完整的包体，无需经过分装
        run: |
          pwsh -ep bypass ./build.ps1 PublishApp

      - name: Upload Unsigned APP to artifacts
        id: upload-unsigned-artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.artifact_name }}
          path: |
            ./out/*.zip
            ./out/*.appx
            ./out/*.deb
            ./out/*.pkg
            
  build_launcher:
    runs-on: ${{ matrix.os == 'windows' && 'windows-latest' || ( matrix.arch == 'arm64' && 'ubuntu-24.04-arm' || 'ubuntu-24.04') }}
    env:
      build_id: launcher_${{ matrix.os }}_${{ matrix.arch }}_${{ matrix.build_type }}_${{ matrix.package }}
      artifact_name: out_launcher_${{ matrix.os }}_${{ matrix.arch }}_${{ matrix.build_type }}_${{ matrix.package }}
      isTestMode: ${{ github.event.inputs.is_test_mode }}
      arch: ${{ matrix.arch }}
    strategy:
      matrix:
        build_type: ['aot']
        package: ['singleFile']
        arch: ['x64', 'x86', 'arm64']
        os: ['windows', 'linux']
        exclude:
          - os: linux
            arch: x86
    name: Build_Launcher_${{ matrix.os }}_${{ matrix.arch }}_${{ matrix.build_type }}_${{ matrix.package }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
          ref: ${{ github.event_name != 'workflow_dispatch' && github.ref || github.event.inputs.release_tag }}

      # - name: Cache .nuke/temp, ~/.nuget/packages
      #   uses: actions/cache@v4
      #   with:
      #     path: |
      #       .nuke/temp
      #       ~/.nuget/packages
      #     key: ${{ runner.os }}-${{ hashFiles('**/global.json', '**/*.csproj', '**/*.props') }}-${{ env.build_id }}

      - name: List files
        run: ls
      
      # Install the .NET Core workload
      - name: Install .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            8.0.x
            9.0.x

      - name: ☢️ Nuke
        env:
          buildType: ${{ matrix.build_type }}
          package: ${{ matrix.package }}
          is_release: ${{ startsWith(github.ref, 'refs/tags/') }}
          arch: ${{ matrix.arch }}
          osName: ${{ matrix.os }}
          buildName: launcher
        run: |
          pwsh -ep bypass ./build.ps1 PublishLauncher

      - name: Upload Unsigned APP to artifacts
        id: upload-unsigned-artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.artifact_name }}
          path: |
            ./out/*.zip
            
  sign_1:
    name: Sign_1
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.release_tag && github.event_name != 'pull_request' }}
    needs: [ build_app, build_launcher ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
          ref: ${{ github.event_name != 'workflow_dispatch' && github.ref || github.event.inputs.release_tag }}
          
      - name: Get commit hash
        uses: prompt/actions-commit-hash@v3
        id: commit
        with:
          prefix: "${{ github.event.inputs.release_tag }}+"

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./out_artifacts

      - name: Create Sign Bundle
        run: |
          pwsh -ep Bypass -c ./tools/release-gen/create-sign-bundle.ps1

      - name: Upload Sign Bundle to artifacts
        id: upload-sign-bundle
        uses: actions/upload-artifact@v4
        with:
          name: sign-bundle
          path: ./ci_tmp/sign_bundle/*
        
      - name: Sign Application
        uses: signpath/github-action-submit-signing-request@v1
        with:
          api-token: '${{ secrets.SIGNPATH_TOKEN }}'
          organization-id: '74962648-db7a-4a10-bfdd-0637542e39df'
          project-slug: 'ClassIsland'
          artifact-configuration-slug: 'sign_bundle_v2'
          signing-policy-slug: release-signing
          github-artifact-id: '${{ steps.upload-sign-bundle.outputs.artifact-id }}'
          wait-for-completion: true
          output-artifact-directory: './out_signed'
          parameters: |
            version: ${{ toJSON(steps.commit.outputs.long) }}
            
      - name: Upload Signed Files to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: signed_artifacts
          path: ./out_signed/*
            
  pack_app:
    runs-on: ubuntu-latest
    needs: [ sign_1 ]
    if: ${{ always() && success('build_app') && success('build_launcher') }}
    env:
      build_id: app_${{ matrix.os }}_${{ matrix.arch }}_${{ matrix.build_type }}_${{ matrix.package }}
      artifact_name: out_app_${{ matrix.os }}_${{ matrix.arch }}_${{ matrix.build_type }}_${{ matrix.package }}
      isTestMode: ${{ github.event.inputs.is_test_mode }}
      arch: ${{ matrix.arch }}
    strategy:
      matrix:
        build_type: ['full', 'selfContained']
        package: ['folder']
        arch: ['x64', 'x86', 'arm64']
        os: ['windows', 'linux']
        exclude:
          - os: linux
            arch: x86
          - os: linux
            build_type: full  # Linux 上安装 .NET 运行时很不方便，故使用自包含打包。
    name: Pack_App_${{ matrix.os }}_${{ matrix.arch }}_${{ matrix.build_type }}_${{ matrix.package }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
          ref: ${{ github.event_name != 'workflow_dispatch' && github.ref || github.event.inputs.release_tag }}
          
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./out_artifacts

      - name: Combine Artifacts
        run: pwsh -ep bypass ./tools/release-gen/combine-artifacts.ps1

      - name: Generate Package
        env:
          package: ${{ matrix.package }}
          isRelease: ${{ startsWith(github.ref, 'refs/tags/') }}
          arch: ${{ matrix.arch }}
          osName: ${{ matrix.os }}
          buildType: ${{ matrix.build_type }}
        run: pwsh -ep bypass ./tools/release-gen/pack/entry.ps1
        
      - name: Upload Packages to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.artifact_name }}
          path: ./out_pack/*.zip
          
  build_nupkg:
    runs-on: windows-latest  # For a list of available runner types, refer to
    # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
    env:
      Solution_Name: ClassIsland.sln                       # Replace with your solution name, i.e. MyWpfApp.sln.
      # Test_Project_Path: your-test-project-path                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Wap_Project_Directory: ClassIsland/ClassIsland    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: ClassIsland/ClassIsland/ClassIsland.csproj                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.
    name: Build Nuget Packages
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
          ref: ${{ github.event_name != 'workflow_dispatch' && github.ref || github.event.inputs.release_tag }} 

      - name: List files
        run: ls

      # Install the .NET Core workload
      - name: Install .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.0.2
        
      - name: Build Nuget packages
        env:
          is_release: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: |
          ls
          pwsh -ep Bypass -c ./tools/release-gen/publish-nupkg.ps1 $env:is_release
      
      - name: Upload Nuget packages to GitHub registry
        if: ${{ github.event_name != 'pull_request' }} 
        env:
          GHPKG_KEY: ${{ secrets.GHPKG_KEY }}
        run: |
          dotnet nuget add source --username HelloWRC --password $env:GHPKG_KEY --store-password-in-clear-text --name github "https://nuget.pkg.github.com/ClassIsland/index.json"
          dotnet nuget push .\out\*.nupkg -k $env:GHPKG_KEY --source "github" --skip-duplicate

      - name: Upload Nuget Packages to artifacts
        if: ${{ !matrix.trim_assets }}
        uses: actions/upload-artifact@v4
        with:
          name: out_nupkgs
          path: ./out/*.nupkg

  publish:
    runs-on: windows-latest
    env:
      isTestMode: ${{ github.event.inputs.is_test_mode == true }}
    if: ${{ github.event.inputs.release_tag && github.event_name != 'pull_request' }}
    needs: [ pack_app, build_nupkg ]
    concurrency:
      group: "publish-public"
    environment:
      name: public
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
          ref: ${{ github.event_name != 'workflow_dispatch' && github.ref || github.event.inputs.release_tag }} 
          
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./out_artifacts

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.METADATA_DEPLOY_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}

      - name: Upload APP
        env:
          GHAPP_PRIVATE_KEY: ${{ secrets.GHAPP_PRIVATE_KEY }}
          GHAPP_ID: 998668
          GHAPP_INSTALLATION_ID: 54893567
          ALIST_HOST: ${{ secrets.ALIST_HOST }}
          ALIST_KEY: ${{ secrets.ALIST_KEY }}
          primaryVersion: ${{ github.event.inputs.primary_version }}
          channels: ${{ github.event.inputs.channels }}
        run: |
          pwsh -ep Bypass -c ./tools/release-gen/login-github.ps1
          pwsh -ep Bypass -c ./tools/release-gen/upload.ps1
          
      # - name: Sentry Release
      #   uses: getsentry/action-release@v1.7.0
      #   env:
      #     SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      #     SENTRY_ORG: classisland
      #     SENTRY_PROJECT: classisland
      #     SENTRY_URL: ${{ vars.SENTRY_URL }}
      #   with:
      #     environment: production
      
      - name: Upload APP to release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "./out/*.zip,./out/*.appx,./out/*.deb,./out/*.pkg"
          draft: true
          bodyFile: ./out/ChangeLogs.md
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.event_name != 'workflow_dispatch' && github.ref || github.event.inputs.release_tag }} 
          
      - name: Upload Nuget packages to NuGet Gallery
        if: ${{ github.event_name != 'pull_request' }}
        env:
          NUGET_KEY: ${{ secrets.NUGET_KEY }}
        run: |
          ls
          cd out_artifacts/out_nupkgs
          dotnet nuget push *.nupkg -k $env:NUGET_KEY -s https://api.nuget.org/v3/index.json --skip-duplicate

